" use command below to install vim plug
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

call plug#begin('~/.vim/plugged')
" Make sure you use single quotes
" surround
Plug 'tpope/vim-surround'
" commentary
Plug 'tpope/vim-commentary'
" Repeat
Plug 'tpope/vim-repeat'
" indent-object
Plug 'michaeljsmith/vim-indent-object'
" happy_hacking colorscheme
Plug 'YorickPeterse/happy_hacking.vim'
" AsyncRun
Plug 'skywind3000/asyncrun.vim'
" smooth scroller
Plug 'terryma/vim-smooth-scroll'
" Goyo distraction free writing plugin
Plug 'junegunn/goyo.vim'
" Thesaurus query plugin for synonyms
Plug 'ron89/thesaurus_query.vim'
" CtrlP file search plugin - a faster alternative is fzf
Plug 'kien/ctrlp.vim'
" ALE
Plug 'w0rp/ale'
" NERDTree - File browser
Plug 'scrooloose/nerdtree'
" Git support for NERDTree
Plug 'Xuyuanp/nerdtree-git-plugin'
" Tagbar - disaply tags on a side pane
" Plug 'majutsushi/tagbar'
" Gutentags - automatic tags generation
" Plug 'ludovicchabant/vim-gutentags'
" Python autocomplete
" Plug 'maralla/completor.vim'
call plug#end()"

"
" GENERAL CONFIGS
"

" screen-256color had ctrl+left & ctrl+right mapped to deleting 5 rows
" set term=xterm-256color
" set happy_hacking colorcheme
colorscheme happy_hacking
" open new splits below
set splitbelow
" open new splits to the right
set splitright
" set line numbers
set nu
" use tabs instead of split windows
set switchbuf=usetab,newtab
" show command typed thus far in the bottom row
set showcmd
" scrolloff
set scrolloff=5
" start searching while typing
set incsearch
" Enable mouse
set mouse=a
" disable search highlighting by default
set nohlsearch
" for ranger 
silent !stty -ixon

" key mappings
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
nnoremap <PageUp> <NOP>
nnoremap <PageDown> <NOP>
inoremap <PageUp> <NOP>
inoremap <PageDown> <NOP>
" remap leader
let mapleader = "\<Space>"
" ctrl+s for saving in normal and insert modes
noremap <silent> <C-S> :update<CR>
vnoremap <silent> <C-S> <C-C>:update<CR>
inoremap <silent> <C-S> <C-O>:update<CR>
" reminder to use <C-s> instead of :w (this works only for :W (typo))
command! W echoe "use <C-s>"
command! Wq wq
command! WQ wq
command! Q q
" prevent annoying typos
nnoremap <S-s> :echoe "S disabled"<CR>
" maintain selection while indenting
vnoremap < <gv
vnoremap > >gv
" autocomplete filenames when opening files with e:
set wildmode=longest,list,full
set wildmenu
" buffer navigation
nnoremap <leader>k :bprevious<CR>
nnoremap <leader>j :bnext<CR>
nmap <Leader>q :bd<CR> 
" split navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
" quickly edit vimrc 
nnoremap <leader>e :e $MYVIMRC<CR>
"go to the end of last line of current paragraph
nnoremap g} }gel
nnoremap g{ {w
" use F3 to quickly count document/selection words, lines and characters
:map <F3> :w ! echo "Lines, words, characters: $(wc -lwm)"<CR>
" ranger style marks
" nnoremap <C-'> :<C-u>marks<CR>:normal! `
" nnoremap C-m :<C-u>marks<CR>:normal! m
" effortless copy to clipboard
nnoremap <leader>c "+y
nnoremap <leader>v "+p
vnoremap <leader>c "+y
vnoremap <leader>v "+p
" close quickfix with esc
autocmd FileType qf nnoremap <buffer><silent> <esc> :quit<cr>
" quicker surround
nnoremap <leader>w ysiw
nnoremap <leader>W ysiW
" disable ex-mode
nnoremap Q <NOP>
" reduce some more frustration
nnoremap q: <NOP>

" CUSTOM / SEARCH FUNCTIONALITY
function s:SearchMode()
  if !exists('s:searchmode') || s:searchmode == 0
    echo 'Search next: scroll hit to middle if not on same page'
    nnoremap <silent> n n:call <SID>MaybeMiddle()<CR><BS><Space>
    nnoremap <silent> N N:call <SID>MaybeMiddle()<CR><BS><Space>
    let s:searchmode = 1
  elseif s:searchmode == 1
    echo 'Search next: scroll hit to middle'
    nnoremap n nzz<BS><Space>
    nnoremap N Nzz<BS><Space>
    let s:searchmode = 2
  else
    echo 'Search next: normal'
    nunmap n
    nunmap N
    let s:searchmode = 0
  endif
endfunction
" If cursor is in first or last line of window, scroll to middle line.
function s:MaybeMiddle()
  if winline() == 1 || winline() == winheight(0)
    normal! zz
  endif
endfunction
" toggle different modes with f4
nnoremap <silent> <F4> :call <SID>SearchMode()<CR>
" default search mode: scroll hit to middle
nnoremap n nzz<BS><Space>
nnoremap N Nzz<BS><Space>
let s:searchmode = 2


" SPELL CHECKING
" toggle VIM's spell checking
nnoremap <leader>s :setlocal spell! spelllang=en_us<CR>
hi SpellBad cterm=underline
hi SpellCap cterm=underline 
hi SpellRare cterm=underline 
hi SpellLocal cterm=underline 
highlight SpellBad ctermfg=Red term=Reverse guisp=bg gui=undercurl ctermbg=Red
highlight SpellCap ctermfg=Green term=Reverse guisp=bg gui=undercurl ctermbg=Cyan
highlight SpellLocal ctermfg=Cyan term=Underline guisp=bg gui=undercurl ctermbg=Green
highlight SpellRare ctermfg=Magenta term=underline guisp=bg gui=undercurl ctermbg=White

" MACROS 
" this should be somehere in bash specific configurations
let @v = 'Ivariable=$lys$)0'
let @p = 'Iprintlys$)0'

" ABBREVIATIONS
abbrev shebang #!/usr/bin/env bash
abbrev lipsum Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.
abbrev slurmheader 
\<CR>#!/bin/bash
\<CR>#
\<CR>#SBATCH -J prepmasks
\<CR>#
\<CR>#SBATCH --output=logs/prepmasks_%j.txt
\<CR>#SBATCH --error=logs/prepmasks_%j.txt
\<CR>#
\<CR>#SBATCH --mail-user=
\<CR>#SBATCH --mail-type=END
\<CR>#
\<CR>#SBATCH --ntasks=16
\<CR>#
\<CR># time format hours:minutes:seconds or days-hours
\<CR>#SBATCH --time=4:00:00
\<CR>#SBATCH --mem=50000
\<CR>#SBATCH --partition=normal

"
" GENERAL PROGRAMMING
"

" enable indentation by filetype
filetype plugin indent on
" enable syntax highlighting
syntax on
" use 4 spaces instead of tabs
set expandtab
set tabstop=4
" indent with 4 spaces instead of 8
set shiftwidth=4

" QUICKFIX AURTOMATIC RESIZE
autocmd FileType qf call AdjustWindowHeight(3, 30)
function! AdjustWindowHeight(minheight, maxheight)
  exe max([min([line("$")+1, a:maxheight]), a:minheight]) . "wincmd _"
endfunction

"
" PLUGIN CONFIGRATIONS
"

" ASYNCRUN
augroup vimrc
    autocmd QuickFixCmdPost * botright copen 8
augroup END

" SMOOTH SCROLL 
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 2, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 2, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" GOYO SETTINGS
function! s:goyo_enter()
  " Smaller top and bottom margins!
  set noshowcmd
  set scrolloff=999
endfunction
" 
function! s:goyo_leave()
  set showcmd
  set scrolloff=5
endfunction
" 
autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()

" THESAURUS QUERY
" Tip: use <C-x><C-u> to autocomplete using Thesaurus in insert mode
nnoremap <Leader>t :ThesaurusQueryReplaceCurrentWord<CR>
vnoremap <Leader>t y:ThesaurusQueryReplace <C-r>"<CR>

" CTRLP
let g:ctrlp_max_height = 25
let g:ctrlp_cmd = 'CtrlPLastMode'
" Use cache for CtrlP
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
" use faster ag for searching
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" ALE 
" ale enabled
let g:ale_enabled = 1
" Autofix issues on save
let g:ale_fix_on_save = 0
" disable ALE completion
let g:ale_completion_enabled = 0
" Lint only after save
let g:ale_lint_on_text_changed = 'never'
" warnign and error signs
let g:ale_sign_error = '--'
let g:ale_sign_warning = '-'
" select used linters
let g:ale_linters = {'python': ['flake8']}
" select used fixers
let g:ale_fixers = {'python': ['autopep8', 'isort', 'yapf', 'remove_trailing_lines', 'trim_whitespace']}
" ale keybinds
nnoremap <leader>n :ALENextWrap<CR>
nnoremap <leader>N :ALEPreviousWrap<CR>
nnoremap <leader>gg :ALEFirst<CR>
nnoremap <leader>G :ALELast<CR>
nnoremap <leader>f :ALEFix<CR>

" NERDTREE
nnoremap <leader>x :NERDTreeToggle<CR>
vnoremap <leader>x :NERDTreeToggle<CR>

" TAGBAR
nnoremap <leader>z :TagbarToggle<CR>

"
"LANGUAGE SPECIFIC CONFIGS
"

" PYTHON
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4 expandtab
autocmd Filetype python noremap <F5> :AsyncRun python % <CR>
noremap <F7> :call asyncrun#quickfix_toggle(8)<cr>
" insert pudb/ipdb breakpoints
nnoremap <leader>b Oimport ipdb; ipdb.set_trace()^^
nnoremap <leader>B oimport pudb; pudb.set_trace()^^

" R
autocmd Filetype r noremap <F5> :AsyncRun Rscript % <CR>

" MARKDOWN
" Render markdown files in the background and refresh mupdf
autocmd Filetype markdown noremap <F5> :AsyncRun -raw=1 @ pandoc <C-r>% -o <C-r>%.pdf && pkill -1 mupdf<CR><CR>
autocmd Filetype rmd noremap <F5> :AsyncRun -raw=1 @ Rscript -e "require('rmarkdown'); render('<C-r>%')" && pkill -1 mupdf<CR><CR>
